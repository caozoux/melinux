#ifndef __KMEM_IOCTL_H__
#define __KMEM_IOCTL_H__

enum IOCTL_USEKMEM_SUB{
	IOCTL_USEKMEM_NONE = 0,
	IOCTL_USEKMEM_DUMP,
	IOCTL_USEKMEM_SHOW,
	IOCTL_USEKMEM_GET,
	IOCTL_USEKMEM_CACHE,
	IOCTL_USEKMEM_SWAPCACHE,
	IOCTL_USEKMEM_ACTIVE_ANON_PAGE,
	IOCTL_USEKMEM_INACTIVE_ANON_PAGE,
	IOCTL_USEKMEM_ACTIVE_PAGE,
	IOCTL_USEKMEM_INACTIVE_PAGE,
	IOCTL_USEKMEM_VMA_SCAN,
	IOCTL_USEKMEM_GET_PTE, //get memory addr pte value
	IOCTL_USEKMEM_PAGE_ATTR,
	IOCTL_USEKMEM_TESTBUDDY,
	IOCTL_USEKMEM_FULL_PAGE_SCAN,
	IOCTL_USEKMEM_SLUB_OP,
	IOCTL_USEKMEM_RESOURCE_SCAN,
	IOCTL_USEKMEM_TESTMMAP,
	//栈溢出
	IOCTL_USEKMEM_STACK_SEGMENT,
};

enum IOCTL_USEKMEM_DUMP_SUB{
	IOCTL_USEKMEM_DUMP_SUB_NONE = 0,
	//dump 内存水线
	IOCTL_USEKMEM_DUMP_MEMORYWARTER,
	//遍历内存水线
	IOCTL_USEKMEM_DUMP_EACH_CSS,
};

struct kmem_dump {
	enum IOCTL_USEKMEM_DUMP_SUB dumpcmd;
};

struct kmem_ioctl {
	int enable;
	enum IOCTL_USEKMEM_SUB subcmd;
	void *data;	
	int len;
	//int threshold;
};

#endif /* ifndef __KTRACE_IOCTL_H__ */

