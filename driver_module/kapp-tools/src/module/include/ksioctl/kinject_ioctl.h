#ifndef __KTRACE_IOCTL_H__
#define __KTRACE_IOCTL_H__

enum IOCTL_INJECT_SUB{
	IOCTL_INJECT_NONE = 0,
	IOCTL_INJECT_NULL,
	IOCTL_INJECT_WRITE_PROTECT,
	IOCTL_INJECT_MUTET_DEPLOCK,
	IOCTL_INJECT_SPINLOCK_DEPLOCK,
	IOCTL_INJECT_IRQSPINLOCK_DEPLOCK,
	IOCTL_INJECT_HRTIMER,
	IOCTL_INJECT_SLUB_CTRL,
	IOCTL_INJECT_SLUB_R_OVERWRITE,
	IOCTL_INJECT_SLUB_L_OVERWRITE,
	IOCTL_INJECT_SLUB_DOUBLE_FREE,

	// inject rwsem up/own
	IOCTL_INJECT_RWSEM_WRITEDOWN,
	IOCTL_INJECT_RWSEM_WRITEUP,
	IOCTL_INJECT_RWSEM_READDOWN,
	IOCTL_INJECT_RWSEM_READUP,

	// inject stack overwrite
	IOCTL_INJECT_STACK_OVERWRITE,

	// inject mutext lock 
	IOCTL_INJECT_MUTEXT_LOCK,
	IOCTL_INJECT_MUTEXT_UNLOCK,
	IOCTL_INJECT_MUTEXT_DEALY,

	IOCTL_INJECT_SOFTWATCHDOG_TIMEOUT,
	IOCTL_INJECT_RUC_HUNG,
	IOCTL_INJECT_TASK_HUNG,
	IOCTL_INJECT_WARN,
	IOCTL_INJECT_LIST_CORRUPT,
};


enum IOCTL_USEKINJECT_SUBTEST{
	IOCTL_USEKINJECT_TEST_NONE = 0,
	IOCTL_USEKINJECT_TEST_STATICKEY,
	IOCTL_USEKINJECT_HRTIMER,
};

struct kinject_ioctl {
	int enable;
	struct inject_test {
		enum IOCTL_USEKINJECT_SUBTEST cmd;
	} test_data;
	struct inject_lock{
		//lock ms time
		int lock_ms;
	} lock;
	//int threshold;
};

#endif /* ifndef __KTRACE_IOCTL_H__ */

