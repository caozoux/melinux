#ifndef __KSYSD_IOCTL_H__
#define __KSYSD_IOCTL_H__

enum ioctl_cmdtype {
	IOCTL_NONE,
#if 0
	IOCTL_LOCK =1,
	IOCTL_MEM,
	IOCTL_SOFTLOCK,
	IOCTL_HARDLOCK,
	IOCTL_USERMAP,
	IOCTL_USERCU,
	IOCTL_USEWORKQUEUE,
	IOCTL_USERAIDIXTREE,
	IOCTL_USEEXT2,
	IOCTL_USEATOMIC,
	IOCTL_USEMEM,
	IOCTL_USEDEVBUSDRV,
	IOCTL_USEKMEM,
	IOCTL_USEMSR,
	IOCTL_USEHWPCI,
	IOCTL_USEBLOCK,
	IOCTL_USEKTIME,
	IOCTL_USESCHED,
	IOCTL_USEKRBTREE,
	IOCTL_KVM,
	IOCTL_PCI,
	IOCTL_PANIC,
	IOCTL_TRACE,
	IOCTL_INIT,
#endif
	IOCTL_KPROBE,
	IOCTL_INJECT,
	IOCTL_KTRACE,
	IOCTL_KMEM,
	//device module
	IOCTL_KDEVICE, 
	IOCTL_KBLOCK,
	IOCTL_KRUNLOG,
	IOCTL_KSTACK,
};

enum IOCTL_TYPE {
	IOCTL_TYPE_VMALLOC_MAX=1,
};

enum IOCTL_USEMEM_SUB{
	IOCTL_USEMEM_NONE = 0,
	IOCTL_USEMEM_PAGEDUMP,
	IOCTL_USEMEM_VMA_SCAN,
};

enum IOCTL_PANIC_SUB{
	IOCTL_PANIC_NONE = 0,
	IOCTL_PANIC_NOTIFIER,
	IOCTL_PANIC_UNNOTIFIER,
	IOCTL_PANIC_TRIGGER,
	IOCTL_PANIC_LOG,
};

enum IOCTL_USEKTIME_SUB{
	IOCTL_USEKTIME_NONE = 0,
	IOCTL_USEKTIME_DEV_SCAN,
	IOCTL_USEKTIME_HOOK_HRTIMER_TIMEOUT,
	IOCTL_USEKTIME_FILE,
};

enum IOCTL_USESCHED_SUB{
	IOCTL_USESCHED_NONE = 0,
	//get task struct 
	IOCTL_USESCHED_TASK_GET,
	IOCTL_USESCHED_CREATE_KTHREAD,
	IOCTL_USESCHED_WAKEUP_KTHREAD,
	IOCTL_USESCHED_BIND_CPU,
};

enum IOCTL_USEBLOCK_SUB{
	IOCTL_USEBLOCK_NONE = 0,
	IOCTL_USEBLOCK_INDOE,
	IOCTL_USEBLOCK_FILE,
	IOCTL_USEBLOCK_FILE_DROP_CACHE,
};

enum SLUB_OP {
	SLUB_OP_NONE = 0,
	SLUB_OP_CREATE,
	SLUB_OP_REMOVE,
	SLUB_OP_ADD,
	SLUB_OP_DEC
};

enum IOCTL_USEEXT2_SUB{
	IOCTL_USEEXT2_NONE = 0,
	//遍历supper_block
	IOCTL_USEEXT2_ENUM_SUPBLOCK,
	IOCTL_USEEXT2_GET_BLOCK,
};

enum IOCTL_USERAIDIXTREE_SUB {
	IOCTL_USERAIDIXTREE_NONE = 0,
	IOCTL_USERAIDIXTREE_ADD,
	IOCTL_USERAIDIXTREE_DEL,
	IOCTL_USERAIDIXTREE_GET,
	IOCTL_USERAIDIXTREE_DUMP,
};

enum IOCTL_USERCU_SUB {
	IOCTL_USERCU_NONE = 0,
	IOCTL_USERCU_READTEST_START,
	IOCTL_USERCU_READTEST_END,
};

enum IOCTL_USEATOMIC_SUB {
	IOCTL_USEATOMIC_NONE = 0,
	IOCTL_USEATOMIC_PERFORMANCE,
};

enum IOCTL_HARDLOCK_SUB {
	IOCTL_HARDLOCK_NONE = 0,
	IOCTL_HARDLOCK_LOCK,
	IOCTL_HARDLOCK_UNLOCK,
	IOCTL_HARDLOCK_TRYLOCK,
	IOCTL_HARDLOCK_IRQLOCK,
	IOCTL_HARDLOCK_IRQUNLOCK,
	IOCTL_HARDLOCK_IRQTRYLOCK,
	IOCTL_SEMAPHORE_DOWN,
	IOCTL_SEMAPHORE_UP,
	IOCTL_SEMAPHORE_READ_DOWN,
	IOCTL_SEMAPHORE_READ_UP,
	IOCTL_SEMAPHORE_WRITE_UP,
	IOCTL_SEMAPHORE_WRITE_DOWN
};

enum IOCTL_USEWORKQUEUE_SUB{
	IOCTL_USEWORKQUEUE_NONE = 0,
	//dumpstack of function
	IOCTL_USEWORKQUEUE_SIG,
	IOCTL_USEWORKQUEUE_SIG_SPINLOCK,
	IOCTL_USEWORKQUEUE_SIG_SPINLOCKIRQ,
	IOCTL_USEWORKQUEUE_PERCPU,
	IOCTL_USEWORKQUEUE_PERCPU_SPINLOCKIRQ_RACE,
	IOCTL_USEWORKQUEUE_PEFORMANCE_DELAY,
};

enum IOCTL_PCI_SUB {
	IOCTL_PCI_ENUM, //enmualte all pci device
	IOCTL_PCI_DUMPINFO, //get pci device info
	IOCTL_PCI_ENABLE, //enable pci device
	IOCTL_PCI_DISABLE, //disable pci device
};

enum IOCTL_TRACE_SUB{
	IOCTL_TRACE_NONE = 0,
	IOCTL_TRACE_NULL,
	//softirq hwirq hrtimer timer
	IOCTL_TRACE_IRQ_ALL,
	IOCTL_TRACE_IRQ_HRTIMER,
	IOCTL_TRACE_IRQ_SOFTTIMER,
	IOCTL_TRACE_IRQ_HWIRQ,
	IOCTL_TRACE_IRQ_SOFTIRQ,
};

enum IOCTL_KVM_SUB{
	IOCTL_KVM_NONE = 0,
	IOCTL_KVM_DUMP,
};

enum IOCTL_USEINIT_SUB{
	IOCTL_USEINIT_NONE = 0,
	IOCTL_USEINIT_INIT,
	IOCTL_USEINIT_CHECK,
};

#endif /* ifndef __KSYSD_IOCTL_H__ */

